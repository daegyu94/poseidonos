// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prefetch.proto

#include "prefetch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace prefetch {
constexpr PrefetchMsg::PrefetchMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subsys_id_(0u)
  , ns_id_(0u)
  , pba_(PROTOBUF_ULONGLONG(0)){}
struct PrefetchMsgDefaultTypeInternal {
  constexpr PrefetchMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrefetchMsgDefaultTypeInternal() {}
  union {
    PrefetchMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrefetchMsgDefaultTypeInternal _PrefetchMsg_default_instance_;
constexpr PrefetchRequest::PrefetchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgs_(){}
struct PrefetchRequestDefaultTypeInternal {
  constexpr PrefetchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrefetchRequestDefaultTypeInternal() {}
  union {
    PrefetchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrefetchRequestDefaultTypeInternal _PrefetchRequest_default_instance_;
constexpr PrefetchReply::PrefetchReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct PrefetchReplyDefaultTypeInternal {
  constexpr PrefetchReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrefetchReplyDefaultTypeInternal() {}
  union {
    PrefetchReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrefetchReplyDefaultTypeInternal _PrefetchReply_default_instance_;
}  // namespace prefetch
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prefetch_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_prefetch_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prefetch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prefetch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchMsg, subsys_id_),
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchMsg, ns_id_),
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchMsg, pba_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchRequest, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchReply, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::prefetch::PrefetchMsg)},
  { 8, -1, sizeof(::prefetch::PrefetchRequest)},
  { 14, -1, sizeof(::prefetch::PrefetchReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prefetch::_PrefetchMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prefetch::_PrefetchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prefetch::_PrefetchReply_default_instance_),
};

const char descriptor_table_protodef_prefetch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016prefetch.proto\022\010prefetch\"<\n\013PrefetchMs"
  "g\022\021\n\tsubsys_id\030\001 \001(\r\022\r\n\005ns_id\030\002 \001(\r\022\013\n\003p"
  "ba\030\003 \001(\004\"6\n\017PrefetchRequest\022#\n\004msgs\030\001 \003("
  "\0132\025.prefetch.PrefetchMsg\" \n\rPrefetchRepl"
  "y\022\017\n\007success\030\001 \001(\0102R\n\nPrefetcher\022D\n\014Pref"
  "etchData\022\031.prefetch.PrefetchRequest\032\027.pr"
  "efetch.PrefetchReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prefetch_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prefetch_2eproto = {
  false, false, 270, descriptor_table_protodef_prefetch_2eproto, "prefetch.proto", 
  &descriptor_table_prefetch_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_prefetch_2eproto::offsets,
  file_level_metadata_prefetch_2eproto, file_level_enum_descriptors_prefetch_2eproto, file_level_service_descriptors_prefetch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_prefetch_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prefetch_2eproto);
  return descriptor_table_prefetch_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_prefetch_2eproto(&descriptor_table_prefetch_2eproto);
namespace prefetch {

// ===================================================================

class PrefetchMsg::_Internal {
 public:
};

PrefetchMsg::PrefetchMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prefetch.PrefetchMsg)
}
PrefetchMsg::PrefetchMsg(const PrefetchMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&subsys_id_, &from.subsys_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pba_) -
    reinterpret_cast<char*>(&subsys_id_)) + sizeof(pba_));
  // @@protoc_insertion_point(copy_constructor:prefetch.PrefetchMsg)
}

void PrefetchMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subsys_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pba_) -
    reinterpret_cast<char*>(&subsys_id_)) + sizeof(pba_));
}

PrefetchMsg::~PrefetchMsg() {
  // @@protoc_insertion_point(destructor:prefetch.PrefetchMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrefetchMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrefetchMsg::ArenaDtor(void* object) {
  PrefetchMsg* _this = reinterpret_cast< PrefetchMsg* >(object);
  (void)_this;
}
void PrefetchMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrefetchMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrefetchMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:prefetch.PrefetchMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&subsys_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pba_) -
      reinterpret_cast<char*>(&subsys_id_)) + sizeof(pba_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefetchMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 subsys_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          subsys_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ns_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ns_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrefetchMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prefetch.PrefetchMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 subsys_id = 1;
  if (this->subsys_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_subsys_id(), target);
  }

  // uint32 ns_id = 2;
  if (this->ns_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ns_id(), target);
  }

  // uint64 pba = 3;
  if (this->pba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pba(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prefetch.PrefetchMsg)
  return target;
}

size_t PrefetchMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prefetch.PrefetchMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 subsys_id = 1;
  if (this->subsys_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subsys_id());
  }

  // uint32 ns_id = 2;
  if (this->ns_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ns_id());
  }

  // uint64 pba = 3;
  if (this->pba() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pba());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrefetchMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prefetch.PrefetchMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PrefetchMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrefetchMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prefetch.PrefetchMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prefetch.PrefetchMsg)
    MergeFrom(*source);
  }
}

void PrefetchMsg::MergeFrom(const PrefetchMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prefetch.PrefetchMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subsys_id() != 0) {
    _internal_set_subsys_id(from._internal_subsys_id());
  }
  if (from.ns_id() != 0) {
    _internal_set_ns_id(from._internal_ns_id());
  }
  if (from.pba() != 0) {
    _internal_set_pba(from._internal_pba());
  }
}

void PrefetchMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prefetch.PrefetchMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefetchMsg::CopyFrom(const PrefetchMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prefetch.PrefetchMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefetchMsg::IsInitialized() const {
  return true;
}

void PrefetchMsg::InternalSwap(PrefetchMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrefetchMsg, pba_)
      + sizeof(PrefetchMsg::pba_)
      - PROTOBUF_FIELD_OFFSET(PrefetchMsg, subsys_id_)>(
          reinterpret_cast<char*>(&subsys_id_),
          reinterpret_cast<char*>(&other->subsys_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefetchMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrefetchRequest::_Internal {
 public:
};

PrefetchRequest::PrefetchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prefetch.PrefetchRequest)
}
PrefetchRequest::PrefetchRequest(const PrefetchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prefetch.PrefetchRequest)
}

void PrefetchRequest::SharedCtor() {
}

PrefetchRequest::~PrefetchRequest() {
  // @@protoc_insertion_point(destructor:prefetch.PrefetchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrefetchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrefetchRequest::ArenaDtor(void* object) {
  PrefetchRequest* _this = reinterpret_cast< PrefetchRequest* >(object);
  (void)_this;
}
void PrefetchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrefetchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrefetchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:prefetch.PrefetchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefetchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .prefetch.PrefetchMsg msgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrefetchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prefetch.PrefetchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prefetch.PrefetchMsg msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prefetch.PrefetchRequest)
  return target;
}

size_t PrefetchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prefetch.PrefetchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prefetch.PrefetchMsg msgs = 1;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrefetchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prefetch.PrefetchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrefetchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrefetchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prefetch.PrefetchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prefetch.PrefetchRequest)
    MergeFrom(*source);
  }
}

void PrefetchRequest::MergeFrom(const PrefetchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prefetch.PrefetchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
}

void PrefetchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prefetch.PrefetchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefetchRequest::CopyFrom(const PrefetchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prefetch.PrefetchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefetchRequest::IsInitialized() const {
  return true;
}

void PrefetchRequest::InternalSwap(PrefetchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefetchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrefetchReply::_Internal {
 public:
};

PrefetchReply::PrefetchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prefetch.PrefetchReply)
}
PrefetchReply::PrefetchReply(const PrefetchReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:prefetch.PrefetchReply)
}

void PrefetchReply::SharedCtor() {
success_ = false;
}

PrefetchReply::~PrefetchReply() {
  // @@protoc_insertion_point(destructor:prefetch.PrefetchReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrefetchReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrefetchReply::ArenaDtor(void* object) {
  PrefetchReply* _this = reinterpret_cast< PrefetchReply* >(object);
  (void)_this;
}
void PrefetchReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrefetchReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrefetchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:prefetch.PrefetchReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefetchReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrefetchReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prefetch.PrefetchReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prefetch.PrefetchReply)
  return target;
}

size_t PrefetchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prefetch.PrefetchReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrefetchReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prefetch.PrefetchReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PrefetchReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrefetchReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prefetch.PrefetchReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prefetch.PrefetchReply)
    MergeFrom(*source);
  }
}

void PrefetchReply::MergeFrom(const PrefetchReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prefetch.PrefetchReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void PrefetchReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prefetch.PrefetchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefetchReply::CopyFrom(const PrefetchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prefetch.PrefetchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefetchReply::IsInitialized() const {
  return true;
}

void PrefetchReply::InternalSwap(PrefetchReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefetchReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prefetch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prefetch::PrefetchMsg* Arena::CreateMaybeMessage< ::prefetch::PrefetchMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prefetch::PrefetchMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::prefetch::PrefetchRequest* Arena::CreateMaybeMessage< ::prefetch::PrefetchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prefetch::PrefetchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::prefetch::PrefetchReply* Arena::CreateMaybeMessage< ::prefetch::PrefetchReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prefetch::PrefetchReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
